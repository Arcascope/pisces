# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/100.ipynb.

# %% auto 0
__all__ = ['TorchDeviceEnum', 'AutoConfiguringTorchDevice', 'MLModelWithTransforms']

# %% ../nbs/100.ipynb 4
from enum import Enum
from typing import List

from enum import Enum, auto
from typing import Dict, List, Optional, Tuple, Union

from pathlib import Path

import numpy as np

# %% ../nbs/100.ipynb 5
from enum import Enum, auto
from typing import Any

import torch


class TorchDeviceEnum(Enum):
    cpu = auto()
    cuda = auto()
    metal = auto()

    @property
    def device(self) -> torch.device:
        if self == TorchDeviceEnum.cpu:
            return torch.device("cpu")
        elif self == TorchDeviceEnum.cuda:
            return torch.device("cuda:0")
        elif self == TorchDeviceEnum.metal:
            return torch.device("mps")


class AutoConfiguringTorchDevice:
    def __init__(self) -> None:
        super().__init__()
        if torch.cuda.is_available():
            self._dev_enum = TorchDeviceEnum.cuda
        elif torch.backends.mps.is_available():
            self._dev_enum = TorchDeviceEnum.metal
        else:
            self._dev_enum = TorchDeviceEnum.cpu

        self.device = self._dev_enum.device

    def __call__(self, *args: Any, **kwds: Any) -> torch.device:
        return self.device

    def __str__(self) -> str:
        if self._dev_enum == TorchDeviceEnum.cpu:
            return "CPU"
        elif self._dev_enum == TorchDeviceEnum.cuda:
            return "CUDA-enabled GPU (NVidia)"
        elif self._dev_enum == TorchDeviceEnum.metal:
            return "Metal-enabled GPU (Apple)"


# %% ../nbs/100.ipynb 6
from .enums import KnownModel


class MLModelWithTransforms:
    def __init__(self) -> None:
        self.device = AutoConfiguringTorchDevice().device

    @property
    def model_type(self) -> KnownModel:
        return None
